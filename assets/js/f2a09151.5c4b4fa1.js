"use strict";(self.webpackChunkdata_and_analytics=self.webpackChunkdata_and_analytics||[]).push([[7618],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(a),h=i,g=u["".concat(l,".").concat(h)]||u[h]||p[h]||r;return a?n.createElement(g,o(o({ref:t},d),{},{components:a})):n.createElement(g,o({ref:t},d))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},7761:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_position:112,title:"Loading data via Pipeline to Warehouse",slug:"/wiki/msfabric/dataload3",tags:["Data"]},o="Loading data via Pipeline to Warehouse",s={unversionedId:"wiki/msfabric/Loading data via Pipeline to Warehouse copy",id:"wiki/msfabric/Loading data via Pipeline to Warehouse copy",title:"Loading data via Pipeline to Warehouse",description:"1. Create a new Pipeline and use a copy action",source:"@site/docs/03-wiki/03-msfabric/112-Loading data via Pipeline to Warehouse copy.md",sourceDirName:"03-wiki/03-msfabric",slug:"/wiki/msfabric/dataload3",permalink:"/wiki/msfabric/dataload3",draft:!1,tags:[{label:"Data",permalink:"/tags/data"}],version:"current",sidebarPosition:112,frontMatter:{sidebar_position:112,title:"Loading data via Pipeline to Warehouse",slug:"/wiki/msfabric/dataload3",tags:["Data"]},sidebar:"tutorialSidebar",previous:{title:"Loading files from ADLS to Lakehouse via Pipeline",permalink:"/wiki/msfabric/dataload1"},next:{title:"Loading a table from a Semantic Model to a Lakehouse",permalink:"/wiki/msfabric/dataload4"}},l={},c=[{value:"1. Create a new Pipeline and use a copy action",id:"1-create-a-new-pipeline-and-use-a-copy-action",level:4},{value:"2. In the destination settings, define the schema and table where data shall be written to",id:"2-in-the-destination-settings-define-the-schema-and-table-where-data-shall-be-written-to",level:4},{value:"3. Creating tables with SQL",id:"3-creating-tables-with-sql",level:4},{value:"4. Copying data into newly created tables",id:"4-copying-data-into-newly-created-tables",level:4},{value:"Other useful SQL code snippets",id:"other-useful-sql-code-snippets",level:2},{value:"Cloning tables into another schema",id:"cloning-tables-into-another-schema",level:4},{value:"Transforming data using a stored procedure",id:"transforming-data-using-a-stored-procedure",level:4},{value:"Using the visual query editor in a Warehouse",id:"using-the-visual-query-editor-in-a-warehouse",level:2},{value:"Using Shortcuts to link to tables from another OneLake entity (Warehouse, Lakehouse etc.)",id:"using-shortcuts-to-link-to-tables-from-another-onelake-entity-warehouse-lakehouse-etc",level:2},{value:"Linking a Lakehouse into a Warehouse to execute cross-warehouse queries",id:"linking-a-lakehouse-into-a-warehouse-to-execute-cross-warehouse-queries",level:2}],d={toc:c};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"loading-data-via-pipeline-to-warehouse"},"Loading data via Pipeline to Warehouse"),(0,i.kt)("h4",{id:"1-create-a-new-pipeline-and-use-a-copy-action"},"1. Create a new Pipeline and use a copy action"),(0,i.kt)("h4",{id:"2-in-the-destination-settings-define-the-schema-and-table-where-data-shall-be-written-to"},"2. In the destination settings, define the schema and table where data shall be written to"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"screenshot",src:a(37404).Z,width:"1597",height:"893"})),(0,i.kt)("h4",{id:"3-creating-tables-with-sql"},"3. Creating tables with SQL"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Creating tables with SQL"',title:'"Creating',tables:!0,with:!0,'SQL"':!0},"/*\n1. Drop the dimension_city table if it already exists.\n2. Create the dimension_city table.\n3. Drop the fact_sale table if it already exists.\n4. Create the fact_sale table.\n*/\n\n--dimension_city\nDROP TABLE IF EXISTS [dbo].[dimension_city];\nCREATE TABLE [dbo].[dimension_city]\n    (\n        [CityKey] [int] NULL,\n        [WWICityID] [int] NULL,\n        [City] [varchar](8000) NULL,\n        [StateProvince] [varchar](8000) NULL,\n        [Country] [varchar](8000) NULL,\n        [Continent] [varchar](8000) NULL,\n        [SalesTerritory] [varchar](8000) NULL,\n        [Region] [varchar](8000) NULL,\n        [Subregion] [varchar](8000) NULL,\n        [Location] [varchar](8000) NULL,\n        [LatestRecordedPopulation] [bigint] NULL,\n        [ValidFrom] [datetime2](6) NULL,\n        [ValidTo] [datetime2](6) NULL,\n        [LineageKey] [int] NULL\n    );\n\n--fact_sale\n\nDROP TABLE IF EXISTS [dbo].[fact_sale];\n\nCREATE TABLE [dbo].[fact_sale]\n(\n    [SaleKey] [bigint] NULL,\n    [CityKey] [int] NULL,\n    [CustomerKey] [int] NULL,\n    [BillToCustomerKey] [int] NULL,\n    [StockItemKey] [int] NULL,\n    [InvoiceDateKey] [datetime2](6) NULL,\n    [DeliveryDateKey] [datetime2](6) NULL,\n    [SalespersonKey] [int] NULL,\n    [WWIInvoiceID] [int] NULL,\n    [Description] [varchar](8000) NULL,\n    [Package] [varchar](8000) NULL,\n    [Quantity] [int] NULL,\n    [UnitPrice] [decimal](18, 2) NULL,\n    [TaxRate] [decimal](18, 3) NULL,\n    [TotalExcludingTax] [decimal](29, 2) NULL,\n    [TaxAmount] [decimal](38, 6) NULL,\n    [Profit] [decimal](18, 2) NULL,\n    [TotalIncludingTax] [decimal](38, 6) NULL,\n    [TotalDryItems] [int] NULL,\n    [TotalChillerItems] [int] NULL,\n    [LineageKey] [int] NULL,\n    [Month] [int] NULL,\n    [Year] [int] NULL,\n    [Quarter] [int] NULL\n);\n")),(0,i.kt)("h4",{id:"4-copying-data-into-newly-created-tables"},"4. Copying data into newly created tables"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Copying data into newly created tables"',title:'"Copying',data:!0,into:!0,newly:!0,created:!0,'tables"':!0},"--Copy data from the public Azure storage account to the dbo.dimension_city table.\nCOPY INTO [dbo].[dimension_city]\nFROM 'https://azuresynapsestorage.blob.core.windows.net/sampledata/WideWorldImportersDW/tables/dimension_city.parquet'\nWITH (FILE_TYPE = 'PARQUET');\n\n--Copy data from the public Azure storage account to the dbo.fact_sale table.\nCOPY INTO [dbo].[fact_sale]\nFROM 'https://azuresynapsestorage.blob.core.windows.net/sampledata/WideWorldImportersDW/tables/fact_sale.parquet'\nWITH (FILE_TYPE = 'PARQUET');\n")),(0,i.kt)("h2",{id:"other-useful-sql-code-snippets"},"Other useful SQL code snippets"),(0,i.kt)("h4",{id:"cloning-tables-into-another-schema"},"Cloning tables into another schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Cloning tables into another schema"',title:'"Cloning',tables:!0,into:!0,another:!0,'schema"':!0},"CREATE SCHEMA dbo1;\n\n--Create a clone of the dbo.dimension_city table in the dbo1 schema.    \nCREATE TABLE [dbo1].[dimension_city1] AS CLONE OF [dbo].[dimension_city];\n\n--Create a clone of the dbo.fact_sale table in the dbo1 schema.    \nCREATE TABLE [dbo1].[fact_sale1] AS CLONE OF [dbo].[fact_sale];\n")),(0,i.kt)("h4",{id:"transforming-data-using-a-stored-procedure"},"Transforming data using a stored procedure"),(0,i.kt)("p",null,"First we create a stored procedure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Creating the stored procedure"',title:'"Creating',the:!0,stored:!0,'procedure"':!0},"--Drop the stored procedure if it already exists.\nDROP PROCEDURE IF EXISTS [dbo].[populate_aggregate_sale_by_city]\nGO\n\n--Create the populate_aggregate_sale_by_city stored procedure.\nCREATE PROCEDURE [dbo].[populate_aggregate_sale_by_city]\nAS\nBEGIN\n    --If the aggregate table already exists, drop it. Then create the table.\n    DROP TABLE IF EXISTS [dbo].[aggregate_sale_by_date_city];\n    CREATE TABLE [dbo].[aggregate_sale_by_date_city]\n        (\n            [Date] [DATETIME2](6),\n            [City] [VARCHAR](8000),\n            [StateProvince] [VARCHAR](8000),\n            [SalesTerritory] [VARCHAR](8000),\n            [SumOfTotalExcludingTax] [DECIMAL](38,2),\n            [SumOfTaxAmount] [DECIMAL](38,6),\n            [SumOfTotalIncludingTax] [DECIMAL](38,6),\n            [SumOfProfit] [DECIMAL](38,2)\n        );\n--Reload the aggregated dataset to the table.\nINSERT INTO [dbo].[aggregate_sale_by_date_city]\nSELECT\n    FS.[InvoiceDateKey] AS [Date], \n    DC.[City], \n    DC.[StateProvince], \n    DC.[SalesTerritory], \n    SUM(FS.[TotalExcludingTax]) AS [SumOfTotalExcludingTax], \n    SUM(FS.[TaxAmount]) AS [SumOfTaxAmount], \n    SUM(FS.[TotalIncludingTax]) AS [SumOfTotalIncludingTax], \n    SUM(FS.[Profit]) AS [SumOfProfit]\nFROM [dbo].[fact_sale] AS FS\nINNER JOIN [dbo].[dimension_city] AS DC\n    ON FS.[CityKey] = DC.[CityKey]\nGROUP BY\n    FS.[InvoiceDateKey],\n    DC.[City], \n    DC.[StateProvince], \n    DC.[SalesTerritory]\nORDER BY \n    FS.[InvoiceDateKey], \n    DC.[StateProvince], \n    DC.[City];\nEND\n")),(0,i.kt)("p",null,"Then we execute it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Executing the stored procedure"',title:'"Executing',the:!0,stored:!0,'procedure"':!0},"--Execute the stored procedure to create the aggregate table.\nEXEC [dbo].[populate_aggregate_sale_by_city];\n")),(0,i.kt)("h2",{id:"using-the-visual-query-editor-in-a-warehouse"},"Using the visual query editor in a Warehouse"),(0,i.kt)("p",null,"We can use the Power Query functionalities to query and transform data:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"screenshot",src:a(14827).Z,width:"1624",height:"907"})),(0,i.kt)("h2",{id:"using-shortcuts-to-link-to-tables-from-another-onelake-entity-warehouse-lakehouse-etc"},"Using Shortcuts to link to tables from another OneLake entity (Warehouse, Lakehouse etc.)"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"screenshot",src:a(78958).Z,width:"1626",height:"911"})),(0,i.kt)("h2",{id:"linking-a-lakehouse-into-a-warehouse-to-execute-cross-warehouse-queries"},"Linking a Lakehouse into a Warehouse to execute cross-warehouse queries"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"screenshot",src:a(70476).Z,width:"1624",height:"907"})))}u.isMDXComponent=!0},37404:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/wiki-msfabric-10-007319c3aa6a646a75787892fb533bc0.png"},14827:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/wiki-msfabric-11-f99d776037f9f0f74cce197782512359.png"},78958:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/wiki-msfabric-12-540eb566ffa4bdcbc0051ccd8d6be69b.png"},70476:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/wiki-msfabric-13-9a5ec8e3380e6cd0d24fdcd59d194239.png"}}]);